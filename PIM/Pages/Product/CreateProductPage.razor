@page "/Product/Create"

@using PIM.Data
@using PIM.Data.Services
@using PimModels.Models
@using PimModels.RequestModels

@inject ProductService _productService
@inject StateContainer _stateContainer 
@inject CategoryService _categoryService
@inject AttributeService _attributeService

<h3>CREATE PRODUCT</h3>

@if(!string.IsNullOrWhiteSpace(_productService.Message))
{
    <text>@_productService.Message</text>
}

<EditForm Model="@createProduct" OnValidSubmit="@Create" style="display: flex">
    <div style="display: flex; flex-direction: column">
        <label for="name">Name:</label>
        <InputText id="name" @bind-Value="createProduct.Name" />
        <label for="sku">SKU:</label>
        <InputText id="sku" @bind-Value="createProduct.Sku" />
        <label for="ean">EAN:</label>
        <InputText id="ean" @bind-Value="createProduct.Ean" />
        <label for="desc">Description:</label>
        <InputText id="desc" @bind-Value="createProduct.Description" />
        <label for="descHtml">Description HTML:</label>
        <InputText id="descHtml" @bind-Value="createProduct.DescriptionHTML" />
        <p>Dimensions: </p>
        <InputNumber id="width" @bind-Value="createProduct.Width" />X
        <InputNumber id="height" @bind-Value="createProduct.Height" />X
        <InputNumber id="length" @bind-Value="createProduct.Length" />X
        <label for="cateogory">Product category:</label>
        <InputSelect id="category" @bind-Value="selectCategoryProp" >
            <option value=""></option>
            @foreach(var category in categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
        @foreach(var attr in productAttributes)
        {
            <p>@attr.AttributeProto.Name</p>
            @switch(attr.AttributeProto.AttributeType)
            {
                case AttributeTypeEnum.Bool: 
                    <InputCheckbox  @bind-Value="@attr.boolVal"/>
                    if (attr.Value == attr.AttributeProto.DefaultValue)
                    {
                        <p> DEFAULT VALUE</p>
                    }
                    break;
                case AttributeTypeEnum.Integer:
                    <InputNumber @bind-Value="@attr.intVal"></InputNumber>
                    if (attr.Value == attr.AttributeProto.DefaultValue)
                    {
                        <p> DEFAULT VALUE</p>
                    }
                    break;
                case AttributeTypeEnum.Float:
                    <InputNumber @bind-Value="@attr.floatVal" @bind-Value:format="F2"></InputNumber>
                    if (attr.Value == attr.AttributeProto.DefaultValue)
                    {
                        <p> DEFAULT VALUE</p>
                    }
                    break;
                case AttributeTypeEnum.String:
                    <InputText @bind-Value="@attr.Value"></InputText>
                    if (attr.Value == attr.AttributeProto.DefaultValue)
                    {
                        <p> DEFAULT VALUE</p>
                    }
                    break;
                case AttributeTypeEnum.List:
                    <InputSelect id="category" @bind-Value="attr.Value" >
                        <option value=""></option>
                        @foreach(var stringValue in attr.AttributeProto.PossibleValues.Split(',', StringSplitOptions.RemoveEmptyEntries))
                        {
                            <option value="@stringValue">@stringValue</option>
                        }
                    </InputSelect>
                    if (attr.Value == attr.AttributeProto.DefaultValue)
                    {
                        <p> DEFAULT VALUE</p>
                    }
                    break;

                default: break;
            }
        }
        <div style="display:flex; flex-direction:row; column-gap:3%; flex-wrap:wrap; ">
            @foreach(var photo in productImages)
            {
                <div style="background-color: lightpink; width: 200px; height: 200px; flex-basis: 20%; margin-top:5px;">
                    @if(photo.Image is null) { <p>EMPTY</p> }
                    else
                    {
                        <img style="max-width:100%; max-height: 100%;" src="@string.Format($"data:{photo.ContentType};base64,{photo.Image}")">
                        <a @onclick="() => RemoveImage(photo) "> X </a>
                        <img/>
                    }
                </div>
            }
            <InputFile @key="@(resetInput)" OnChange="InsertImage" multiple />
        </div>


        <br />
        <button type="submit">CREATE</button>
    </div>
    <div>
        <DataAnnotationsValidator />
        <ValidationSummary />
    </div>
</EditForm>

@code 
{
    CreateProduct createProduct = new();
    List<Category> categories = new();
    List<CreateProductAttribute> productAttributes = new();
    List<CreateProductImage> productImages = new();
    string resetInput = Guid.NewGuid().ToString();
    private int? selectCategoryProp
    {
        get => createProduct.CategoryId;
        set
        {
            createProduct.CategoryId = value == 0 ? null : value;
            SelectCategory(value);
        }
    }

    protected override async  Task OnInitializedAsync()
    {
        _productService.Message = "";
        categories = await _categoryService.GetAllAsync(_stateContainer.Catalog.Id);
        while (productImages.Count < 16) productImages.Add(new CreateProductImage());
    }

    private async Task Create()
    {
        createProduct.ProductAttributes = new();
        productAttributes.ForEach(x => createProduct.ProductAttributes.Add(new ProductAttribute() { Value = x.Value, AttributeProtoId = x.AttributeProtoId }));
        createProduct.ProductImages = new();
        createProduct.ProductImages = productImages;
        createProduct.CatalogId = _stateContainer.Catalog.Id;
        await _productService.CreateAsync(createProduct);



    }

    private async void SelectCategory(int? categoryId)
    {
        productAttributes = new();
        var categoryProtos = new List<CategoryProductAttributeProto>();

        if(categoryId == 0)
        {
            productAttributes.Clear();
            StateHasChanged();
            return;
        }
        if (categoryId == null) categoryProtos = new();
        else categoryProtos = await _attributeService.GetCategoryInheritedProtos(categoryId.Value);
        foreach(var proto in categoryProtos)
        {
            productAttributes.Add(new CreateProductAttribute()
            {
                Value = proto.ProductAttributeProto.DefaultValue,
                AttributeProtoId = proto.ProductAttributeProto.Id,
                AttributeProto = proto.ProductAttributeProto
            });
        }
        StateHasChanged();
    }

    private async void InsertImage(InputFileChangeEventArgs e)
    {
        if (e.FileCount == 1)
        {
            try
            {
                var buffers = new byte[e.File.Size];
                using MemoryStream ms = new();
                await e.File.OpenReadStream(maxAllowedSize: 115242880).CopyToAsync(ms);
                var img = productImages.First(x => x.Image == null);
                img.Image = Convert.ToBase64String(ms.ToArray());
                img.ContentType = e.File.ContentType;
            }
            catch { }
        }
        else
        {
            var files = e.GetMultipleFiles(productImages.Count(x => x.Image == null));
            foreach (var file in files)
            {
                try
                {
                    using MemoryStream ms = new();
                    await file.OpenReadStream(maxAllowedSize: 115242880).CopyToAsync(ms);
                    var img = productImages.First(x => x.Image == null);
                    img.Image = Convert.ToBase64String(ms.ToArray());
                    img.ContentType = file.ContentType;
                }
                catch(Exception ex) {}
            }
        }
        resetInput = Guid.NewGuid().ToString();
        StateHasChanged();
    }

    public void RemoveImage(CreateProductImage img)
    {
        productImages.Remove(img);
        productImages.Add(new CreateProductImage());
        StateHasChanged();
    }
}
