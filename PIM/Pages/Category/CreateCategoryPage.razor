@page "/Category/Create"

@using PIM.Data
@using PIM.Data.Services
@using PimModels.Models
@using PimModels.RequestModels

@inject CategoryService _categoryService
@inject AttributeService _attributeService
@inject StateContainer _stateContainer

<h3>CREATE CATEGORY</h3>

@if(!string.IsNullOrWhiteSpace(_categoryService.Message))
{
    <text>@_categoryService.Message</text>
}

@if(attributeProtos is null || categories is null)
{
    <text>LOADING...</text>
}

<EditForm Model="@createCategory" OnValidSubmit="@Create" style="display: flex">
    <div style="display: flex; flex-direction: column">
        <label for="name">Category name:</label>
        <InputText id="name" @bind-Value="createCategory.Name" />
        <label for="ParentCategoryId">Parent category:</label>
        <InputSelect id="ParentCategoryId" @bind-Value="selectParentCategoryProp">
            <option value="0"></option>
            @foreach(var category in categories.OrderBy(c => c.Name))
            {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
        <p> PARENT CATEGORY INHERITED ATTRIBUTE PROTOTYPES</p>
        @foreach(var proto in parentProtos)
        {
            <p> ---> @proto.ProductAttributeProto.Name</p>
        }

        <select @bind="@selectAttributeProto">
            <option value=0></option>
            @foreach(var proto in attributeProtos.OrderBy(a => a.Name))
            {
                <option value="@proto.Id">@proto.Name</option>
            }
        </select>
        <button type="button" @onclick="() => AddProtoToCategory(selectAttributeProto)"> ADD PROTO</button>
        @foreach(var proto in categoryProtos.OrderBy(a => a.Name))
        {
            <p> --- @proto.Name</p>
            <a @onclick="() => DeleteProtoFromCategory(proto.Id)"> DELETE</a>
        }
        <br />
        <button type="submit">Register</button>
    </div>
    <div>
        <DataAnnotationsValidator />
        <ValidationSummary />
    </div>
</EditForm>

@code 
{
    private CreateCategory createCategory = new();
    private List<ProductAttributeProto> attributeProtos = new();
    private List<CategoryProductAttributeProto> parentProtos = new();
    private List<Category> categories = new();
    private int? selectParentCategoryProp
    {
        get => createCategory.ParentCategoryId;
        set
        {
            createCategory.ParentCategoryId = value;
            SelectParentCategory(value);
        }
    }

    private int selectAttributeProto;
    private List<ProductAttributeProto> categoryProtos = new();

    protected override async Task OnInitializedAsync()
    {
        _categoryService.Message = "";
        attributeProtos = await _attributeService.GetAllCatalogProtosAsync(_stateContainer.Catalog.Id);
        categories = await _categoryService.GetAllAsync(_stateContainer.Catalog.Id);
    }

    private async Task Create()
    {
        createCategory.CatalogId = _stateContainer.Catalog.Id;
        createCategory.AttributeProtos = categoryProtos;
        var resp = await _categoryService.CreateAsync(createCategory);
        if (resp > 0) 
        {
            createCategory = new();
            categoryProtos.Clear();
            parentProtos.Clear();
            attributeProtos = await _attributeService.GetAllCatalogProtosAsync(_stateContainer.Catalog.Id);
            categories = await _categoryService.GetAllAsync(_stateContainer.Catalog.Id);
            selectAttributeProto = 0;
            StateHasChanged();
        }
    }

    private void AddProtoToCategory(int protoId)
    {
        if (protoId == 0) return;
        var item = attributeProtos.First(p => p.Id == protoId);
        categoryProtos.Add(item);
        attributeProtos.Remove(item);
        selectAttributeProto = 0;
    }

    private void DeleteProtoFromCategory(int protoId)
    {
        var item = categoryProtos.First(p => p.Id == protoId);
        attributeProtos.Add(item);
        categoryProtos.Remove(item);
        selectAttributeProto = 0;
    }

    private async void SelectParentCategory(int? parentId)
    {
        parentProtos = new();

        if(parentId == 0)
        {
            parentProtos.Clear();
            categoryProtos.Clear();
            attributeProtos = await _attributeService.GetAllCatalogProtosAsync(_stateContainer.Catalog.Id);
            selectAttributeProto = 0;
            StateHasChanged();
            return;
        }

        parentProtos = await _attributeService.GetCategoryInheritedProtos(parentId.Value);
        categoryProtos.Clear();
        attributeProtos = await _attributeService.GetAllCatalogProtosAsync(_stateContainer.Catalog.Id);
        var atrProtosToDelete = parentProtos.Select(x => x.ProductAttributeProto).DistinctBy(a =>a.Id).ToList();
        atrProtosToDelete.ForEach(x => attributeProtos.Remove(attributeProtos.First(a =>a.Id == x.Id)));
        selectAttributeProto = 0;
        StateHasChanged();
    }
}
