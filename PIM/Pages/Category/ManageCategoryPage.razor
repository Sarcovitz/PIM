@page "/Category/Manage/{categoryId:int}"

@using PIM.Data
@using PIM.Data.Services
@using PimModels.Models
@using PimModels.RequestModels

@inject NavigationManager _navManager
@inject CategoryService _categoryService
@inject AttributeService _attributeService
@inject StateContainer _stateContainer

<h3>MANAGE CATEGORY</h3>

@if(!string.IsNullOrWhiteSpace(_categoryService.Message))
{
    <text>@_categoryService.Message</text>
}

@*@if(attributeProtos is null || categories is null)
{
    <text>LOADING...</text>
}*@

@if(category is null) { <text> WAIT WAIT WAIT</text> }
else
{
    @if (category == new Category()) { _navManager.NavigateTo("/Catalog/List"); }
    else
    {
        <EditForm Model="@updateCategory" OnValidSubmit="@Update" style="display: flex">
        <div style="display: flex; flex-direction: column">
            <label for="name">Category name:</label>
            <InputText id="name" @bind-Value="updateCategory.Name" />
            <label for="ParentCategoryId">Parent category:</label>
            <InputSelect id="ParentCategoryId" @bind-Value="selectParentCategoryProp">
                <option value="0"></option>
                @foreach(var category in categories.OrderBy(c => c.Name))
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
            <p> PARENT CATEGORY INHERITED ATTRIBUTE PROTOTYPES</p>
            @foreach(var proto in parentProtos)
            {
                <p> ---> @proto.ProductAttributeProto.Name</p>
            }

            <select @bind="@selectAttributeProto">
                <option value=0></option>
                @foreach(var proto in attributeProtos.OrderBy(a => a.Name))
                {
                    <option value="@proto.Id">@proto.Name</option>
                }
            </select>
            <button type="button" @onclick="() => AddProtoToCategory(selectAttributeProto)"> ADD PROTO</button>
            @foreach(var proto in categoryProtos.OrderBy(a => a.Name))
            {
                <p> --- @proto.Name</p>
                <a @onclick="() => DeleteProtoFromCategory(proto.Id)"> DELETE</a>
            }
            <br />
            <button type="submit">Update</button>
        </div>
        <div>
            <DataAnnotationsValidator />
            <ValidationSummary />
        </div>
        </EditForm>
    }
}

@code 
{
    [Parameter]
    public int categoryId { get; set; }

    private Category? category = null;
    private UpdateCategory updateCategory = new();
    private List<ProductAttributeProto> attributeProtos = new();
    private List<CategoryProductAttributeProto> parentProtos = new();
    private List<Category> categories = new();
    private int? selectParentCategoryProp
    {
        get => updateCategory.ParentCategoryId;
        set
        {
            updateCategory.ParentCategoryId = value == 0 ? null : value;
            SelectParentCategory(value);
        }
    }

    private int selectAttributeProto;
    private List<ProductAttributeProto> categoryProtos = new();

    protected override async Task OnInitializedAsync()
    {
        _categoryService.Message = "";
        category = await _categoryService.GetAsync(categoryId);
        updateCategory.CatalogId = category.CatalogId;
        updateCategory.AttributeProtos = category.AttributeProtos;        
        updateCategory.Name = category.Name;
        updateCategory.ParentCategoryId = category.ParentCategoryId;
        selectParentCategoryProp = category.ParentCategoryId ?? 0;
        attributeProtos = await _attributeService.GetAllCatalogProtosAsync(_stateContainer.Catalog.Id);
        category.AttributeProtos.ForEach(x => AddProtoToCategory(x.ProductAttributeProtoId)); 
        categories = await _categoryService.GetAllAsync(_stateContainer.Catalog.Id);
        categories.Remove(categories.First(x => x.Id == category.Id));
        category.SubCategories.ForEach(x => DropSubCategories(x));
    }


    public void DropSubCategories(Category subcategory)
    {
        if(subcategory.SubCategories is not null && subcategory.SubCategories.Count > 0)
        {
            foreach (var sub in subcategory.SubCategories) DropSubCategories(sub);
        }
        categories.Remove(categories.FirstOrDefault(x => x.Id == subcategory.Id));
    }

    private async Task Update()
    {
        updateCategory.CatalogId = _stateContainer.Catalog.Id;
        updateCategory.AttributeProtos.Clear();
        categoryProtos.ForEach(x => updateCategory.AttributeProtos.Add(new CategoryProductAttributeProto { CategoryId = categoryId, ProductAttributeProtoId = x.Id }));
        updateCategory.AttributeProtos.DistinctBy(x => x.ProductAttributeProtoId);
        var model = Helpers.ReferenceHelper.DeepClone(updateCategory);
        foreach(var attr in model.AttributeProtos)
        {
            attr.Category = null;
            attr.ProductAttributeProto = null;
        }
        var resp = await _categoryService.UpdateAsync(categoryId ,model);
        if (resp) 
        {
            //updateCategory = new();
            categoryProtos.Clear();
            parentProtos.Clear();
            attributeProtos = await _attributeService.GetAllCatalogProtosAsync(_stateContainer.Catalog.Id);
            categories = await _categoryService.GetAllAsync(_stateContainer.Catalog.Id);
            categories.Remove(categories.First(x => x.Id == category.Id));
            category.SubCategories.ForEach(x => DropSubCategories(x));
            selectAttributeProto = 0;
            await OnInitializedAsync();
        }
    }

    private void AddProtoToCategory(int protoId)
    {
        if (protoId == 0) return;
        var item = attributeProtos.First(p => p.Id == protoId);
        categoryProtos.Add(item);
        attributeProtos.Remove(item);
        selectAttributeProto = 0;
    }

    private void DeleteProtoFromCategory(int protoId)
    {
        var item = categoryProtos.First(p => p.Id == protoId);
        attributeProtos.Add(item);
        categoryProtos.Remove(item);
        selectAttributeProto = 0;
    }

    private async void SelectParentCategory(int? parentId)
    {
        parentProtos = new();

        if(parentId == 0)
        {
            parentProtos.Clear();
            categoryProtos.Clear();
            attributeProtos = await _attributeService.GetAllCatalogProtosAsync(_stateContainer.Catalog.Id);
            selectAttributeProto = 0;
            StateHasChanged();
            return;
        }

        parentProtos = await _attributeService.GetCategoryInheritedProtos(parentId.Value);
        parentProtos = parentProtos.DistinctBy(x => x.ProductAttributeProtoId).ToList();
        categoryProtos.Clear();
        attributeProtos = await _attributeService.GetAllCatalogProtosAsync(_stateContainer.Catalog.Id);
        var atrProtosToDelete = parentProtos.Select(x => x.ProductAttributeProto).DistinctBy(a =>a.Id).ToList();
        atrProtosToDelete.ForEach(x => attributeProtos.Remove(attributeProtos.First(a =>a.Id == x.Id)));
        selectAttributeProto = 0;
        StateHasChanged();
    }
}
