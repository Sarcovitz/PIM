@page "/Auth/Register"

@using PIM.Auth;
@using PimModels.RequestModels

@inject AuthStateProvider _authProvider;
@inject NavigationManager _navManager;

@if(!string.IsNullOrWhiteSpace(_authProvider.Message))
{
    <h1>@_authProvider.Message</h1>
}

<div class="formHolder position-absolute top-50 start-50 translate-middle display:flex">
    <EditForm Model="@registerUser" OnValidSubmit="@SignUp">
        <h3>Register</h3>

        <div class="formFields">
            <div class="inputHolder">
                <label for="username">Username:</label>
                <input type="text" id="username" @bind-value="registerUser.Username" />
            </div>
            <div class="inputHolder">
                <label for="email">E-mail:</label>
                <input type="text" id="email" @bind-value="registerUser.Email" />
            </div>
            <div class="inputHolder">
                <label for="password">Password:</label>
                <input type="password" id="password" @bind-value="registerUser.Password" />
            </div>
            <div class="inputHolder">
                <label for="password2">Repeat password:</label>
                <input type="password" id="password2" @bind-value="registerUser.Password2" />
            </div>
            <br />
            <div class="inputHolder">
                <input type="submit" value="Register"/>
            </div>
        </div>
        <div>
            <DataAnnotationsValidator />
            <ValidationSummary />
        </div>
    </EditForm>
</div>

@code 
{
    private RegisterUser registerUser = new();

    protected override Task OnInitializedAsync() => Task.FromResult(_authProvider.Message = "");

    private async Task SignUp()
    {
        if (await _authProvider.RegisterAsync(registerUser)) registerUser = new();
    }
}
