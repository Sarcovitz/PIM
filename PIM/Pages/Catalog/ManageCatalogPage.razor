@page "/Catalog/Manage/{catalogId:int}"

@using PIM.Data.Services
@using PIM.Helpers
@using PimModels.Models
@using PimModels.RequestModels

@inject NavigationManager _navManager
@inject CatalogService _catalogService
@inject CurrencyService _currencyService
@inject UserService _userService

<div class="container">

    @if(!string.IsNullOrWhiteSpace(_catalogService.Message))
    {
        <text>@_catalogService.Message</text>
    }

    @if(catalog is null) { <text> WAIT WAIT WAIT</text> }
    else
    {
        @if (catalog == new Catalog()) { _navManager.NavigateTo("/Catalog/List"); }
        else
        {
            <div class="formHolder">
                <h3>Manage Catalog</h3>
                <EditForm Model="@updateCatalog" OnValidSubmit="@Update" style="display: flex">
                    <div class="formFields">
                        <div class="flex-row">
                            <div class="inputHolder">
                                <label for="name">Catalog name:</label>
                                <input type="text" id="name" @bind-value="updateCatalog.Name" />
                            </div>
                            <div class="inputHolder">
                            <label for="defaultCurrency">Default currency:</label>
                            <select id="defaultCurrency" @bind="updateCatalog.DefaultCurrencyCode" >
                                <option class="opt-x" value=""></option>
                                @foreach(var currency in currencies)
                                {
                                    <option value="@currency.Code">@currency.Fullname</option>
                                }
                            </select>
                            </div>
                        </div>
                        <br />
                        <text>Users:</text>
                        @if(updateCatalog.CatalogUsers.Where(x=>x.Role != CatalogUserRole.Owner).ToList().Count > 0)
                        {
                            @foreach(var catalogUser in updateCatalog.CatalogUsers.Where(x=>x.Role != CatalogUserRole.Owner).ToList())
                            {
                                <text>@catalogUser.User.Username</text>
                                <a @onclick=@(() => updateCatalog.CatalogUsers.Remove(catalogUser))> DELETE</a>
                            }
                        }
                        <input type="text" @bind="@newUserUsername"></input>
                        <a @onclick=@(() => AddUserAsync(newUserUsername))> ADD NEW USER</a> <text>@addUserMessage</text>
                        <button type="submit">Register</button>
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                    </div>
            </EditForm>
        </div>
        }
    }
</div>



@code {
    [Parameter]
    public int catalogId { get; set; }

    private Catalog? catalog = null;
    private UpdateCatalog updateCatalog = new();
    private List<Currency> currencies = new();

    private string newUserUsername = "";
    private string addUserMessage = "";

    protected override async Task OnInitializedAsync()
    {
        _catalogService.Message = "";
        catalog = await _catalogService.GetAsync(catalogId);
        currencies = await _currencyService.GetAllAsync();
        updateCatalog.Name = catalog.Name;
        updateCatalog.DefaultCurrencyCode = catalog.DefaultCurrencyCode;
        updateCatalog.CatalogUsers = catalog.CatalogUsers;
    }

    private async Task Update()
    {
        var model = ReferenceHelper.DeepClone(updateCatalog);
        foreach (var cu in model.CatalogUsers)
        {
            cu.User = null;
            cu.Catalog = null;
        }

        await _catalogService.UpdateAsync(catalogId, model);
    }

    private async void AddUserAsync(string username)
    {
        var user = await _userService.GetUserByNameAsync(username);
        if(user is null) 
        {
            addUserMessage = "There is now User with this name";
            StateHasChanged();
            return;
        }
        else
        {
            if(updateCatalog.CatalogUsers.Any(x => x.UserId == user.Id))
            {
                addUserMessage = "User is already assigned to this catalog.";
                StateHasChanged();
                return;
            }

            updateCatalog.CatalogUsers.Add(new CatalogUser() { UserId = user.Id, User = user ,CatalogId = catalogId, Role = CatalogUserRole.Worker });
            addUserMessage = "Added.";
            StateHasChanged();
        }
    }
}
